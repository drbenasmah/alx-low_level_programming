!<arch>
0-isupper.c/    0           0     0     644     247       `
#include "main.h"

/**
   * _isupper - checks uppercase
    * @c: parameter
     * Return: 0 if successful
      */

int _isupper(int c)
{
		if (c >= 65 && c < 91)
				{
							return (1);
								}
			else
					{
								return (0);
									}
}

0-memset.c/     0           0     0     644     482       `
#include "main.h"
/**
   *_memset - fills memory with a constant byte.
    *fills the first n bytes of the memory area pointed
     *to by s with the constant b.
      *@s: pointer to memory area.
       *@b: constant to fill memory with.
       *@n: bytes of the memory area to be filled
*Return: pointer to memory area s.
*/
char *_memset(char *s, char b, unsigned int n)
{
	unsigned int counter;

	for (counter = 0; counter < n; counter++)
	{
		s[counter] = b;
	}
	return (s);
}
0-strcat.c/     0           0     0     644     450       `
#include "main.h"
/**
   * _strcat - Function that concatenates two strings.
    * @dest: Pointer to destination string
     * @src: Pointer to source string.
      *
       * Return: pointer to destination string.
*/
char *_strcat(char *dest, char *src)
{
	int length, j;

	length = 0;
	while (dest[length] != '\0')
	{
		length++;
	}
	for (j = 0; src[j] != '\0'; j++, length++)
	{
		dest[length] = src[j];
	}
	dest[length] = '\0';
	return (dest);
}
100-atoi.c/     0           0     0     644     619       `
#include <stdio.h>
#include "main.h"

/**
   * _atoi - function converts string to an integer
    * @s: Pointer parameter
     * Return: returns an integer value
*/
int _atoi(char *s)
{
	unsigned int count = 0, size = 0, j = 0, k = 1, m = 1, i;

	while (*(s + count) != '\0')
	{
		if (size > 0 && (*(s + count) < '0' || *(s + count) > '9'))
			break;

		if (*(s + count) == '-')
			k *= -1;

		if ((*(s + count) >= '0') && (*(s + count) <= '9'))
		{
			if (size > 0)
				m *= 10;
			size++;
		}
		count++;
	}

	for (i = count - size; i < count; i++)
	{
		j = j + ((*(s + i) - 48) * m);
		m /= 10;
	}
	return (j * k);
}

1-isdigit.c/    0           0     0     644     197       `
#include "main.h"

/**
   * _isdigit - checks for digits
    * @c: parameter
     * Return: 0 or 1
*/

int _isdigit(int c)
{
	if (c >= 48 && c < 58)
	{
		return (1);
	}
	else
	{
		return (0);
	}
}

1-memcpy.c/     0           0     0     644     365       `
#include "main.h"
/**
  * char *_memcpy - copies n bytes from memory area src to memory area dest
  * @dest: destination
  * @src: source
  * @n: number of bytes
  * Return: pointer to dest
*/

char *_memcpy(char *dest, char *src, unsigned int n)
{

	int size = n;

	if (size > 0)
	{
		int i;

		for (i = 0; i < size; i++)
		dest[i] = src[i];
	}

	return (dest);
}

1-strncat.c/    0           0     0     644     531       `
#include "main.h"
/**
   * _strncat - function that concatenates two strings.
    * at most n bytes from src
     * @dest: Pointer to destination string
      * @src: Pointer to source string
       * @n: number of bytes to be concatenate
* Return: Pointer to destination string
*/
char *_strncat(char *dest, char *src, int n)
{
	int length, j;

	length = 0;
	while (dest[length] != '\0')
	{
		length++;
	}
	for (j = 0; j < n && src[j] != '\0'; j++, length++)
	{
		dest[length] = src[j];
	}
	dest[length] = '\0';
	return (dest);
}

2-strchr.c/     0           0     0     644     368       `
#include "main.h"
#define NULL 0

/**
  * _strchr - locate 1st occurrence of char in string and returns pointer there
  * @s: string to search
  * @c: target characer
  * Return: pointer to that character in string
*/

char *_strchr(char *s, char c)
{
	int i = 0;

	while (s[i] != '\0' && s[i] != c)
		i++;

	if (s[i] == c)
		return (&s[i]);

	else
		return (NULL);
}
2-strlen.c/     0           0     0     644     264       `
#include <stdio.h>
#include "main.h"

/**
   * _strlen - Function for counting the length of string
    * @s: a pointer for counting the strting length
     * Return: int i
*/

int _strlen(char *s)
{
	int i = 0;

	while (s[i] != '\0')
	{
		i++;
	}

	return (i);
}
2-strncpy.c/    0           0     0     644     410       `
#include "main.h"
/**
   * _strncpy - copies a string
    * @dest: Pointer to a character that will be changed
     * @src: Pointer to a character that will be changed
      * @n: value
       * Return: dest
*/

char *_strncpy(char *dest, char *src, int n)

{
	int i;

	i = 0;

	while (i < n && src[i] != '\0')
	{
		dest[i] = src[i];
		i++;
	}

	while (i < n)
	{
		dest[i] = '\0';
		i++;
	}

	return (dest);
}
3-islower.c/    0           0     0     644     343       `
#include "main.h"
/**
   * _islower - checks if a character is lowercase if YES it returns 1
    * otherwise returns 0 just like islower() function in ctype.h
     * @c: Is the int value to be compared with the ASCII value
      * Return: 0 if successful.
*/
int _islower(int c)
{
	if (c >= 97 && c <= 122)
		return (1);
	else
		return (0);
}

3-puts.c/       0           0     0     644     208       `
#include "main.h"
/**
   * _puts - print a string to stdout
    * @str: pointer parameter
*/

void _puts(char *str)
{
	int i = 0;

	while (str[i] != '\0')
	{
		_putchar(str[i]);
		i++;
	}

	_putchar('\n');
}
3-strcmp.c/     0           0     0     644     494       `
#include "main.h"
/**
   * _strcmp - compares two strings
    * @s1: Pointer to first string
     * @s2: Pointer to second string
      *
* Return: Value less than 0 if string is less than the other
* Value greater than 0 if string is greater then the other
* 0 if strings are equal
*/
int _strcmp(char *s1, char *s2)
{
	int counter, cmpVal;

	counter = 0;
	while (s1[counter] == s2[counter] && s1[counter] != '\0')
	{
		counter++;
	}

	cmpVal = s1[counter] - s2[counter];
		return (cmpVal);
}
3-strspn.c/     0           0     0     644     673       `
#include "main.h"
/**
  * _strspn - return length of string that matches values consistently
  * @s: string to search
  * @accept: target matches
  * Return: number of bytes consecutively matched
*/

unsigned int _strspn(char *s, char *accept)
{
	int i = 0, j;
	int matches = 0;

	while (s[i] != '\0') /*iterate through string*/
	{
		for (j = 0; accept[j] != '\0'; j++) /*iterate through target*/
		{
			if (s[i] == accept[j]) /*record & break at first*/
			{
				matches++;
				break;
			}

			if (accept[j + 1] == '\0' && s[i] != accept[j])
				return (matches);/*return if idx doesn't match*/
		}

		i++;
	}

	return (matches); /* return num if all match till end */

}

4-isalpha.c/    0           0     0     644     281       `
#include "main.h"
/**
   * _isalpha - Return 1 if c is a letter. lowercase or uppercase
    * @c: unsigned int value to be compared with ASCII value
     * Return: 1 if its alphabet otherwise 0
*/
int _isalpha(int c)
{
	if (c >= 65 && c <= 122)
		return (1);
	else
		return (0);
}

4-strpbrk.c/    0           0     0     644     452       `
#include "main.h"
#define NULL 0

/**
  * _strpbrk - return pointer to byte in s that matches a byte in accept
  * @s: string to search
  * @accept: target matches
  * Return: pointer to index of string at first occurence
*/

char *_strpbrk(char *s, char *accept)
{
	int x = 0, y;

	while (s[x] != '\0')
	{
		for (y = 0; accept[y] != '\0'; y++)
		{
			if (s[x] == accept[y])
			{
				s = &s[x];
				return (s);
			}

		}

		x++;
	}

	return (NULL);

}
5-strstr.c/     0           0     0     644     863       `
#include "main.h"
#define NULL 0

/**
  * _strstr - locate and return pointer to first occurence of substring
  * @haystack: string to search
  * @needle: target substring to search for
  * Return: pointer to index of string at first occurence of whole substring
*/
char *_strstr(char *haystack, char *needle)
{
	int i = 0, j, x;

	if (needle[0] == '\0')
		return (haystack);

	while (haystack[i] != '\0') /* iterate through haystack */
	{
		/* if a byte matches first char of needle */
		/* interate through needle until match ends */

		if (haystack[i] == needle[0])
		{
			x = i, j = 0;

			while (needle[j] != '\0')
			{
				if (haystack[x] == needle[j])
				x++, j++;
					else
					break;
				} /* if matched throughout, return haystack */

				if (needle[j] == '\0')
				{
					return (haystack + i);
				}
		}

		i++;
	}

	return (NULL); /* No match */
}

6-abs.c/        0           0     0     644     291       `
#include "main.h"
#include <stdio.h>
/**
   * _abs - computes the absolute value of an integer
    * @n: THe int to be operated upon
     * Return: returns an unsigneed int value to calling function
*/
int _abs(int n)
{
	if (n > 0)
	{
		return (n);
	}
	else
	{
		n *= -1;
		return (n);
	}
}

9-strcpy.c/     0           0     0     644     342       `
#include <stdio.h>
#include "main.h"

/**
   * _strcpy - function copies string pointed to src and dest
    * @dest: Pointer parameter
     * @src: poiter parameter
      * Return: char
*/

char *_strcpy(char *dest, char *src)
{
	int i;

	for (i = 0; *(src + i) != '\0'; i++)
	{
		dest[i] = *(src + i);
	}
	dest[i] = '\0';

	return (dest);
}
_putchar.c/     0           0     0     644     266       `
#include <unistd.h>

/**
   * _putchar - writes the character c to stdout
    * @c: The character to print
     *
      * Return: On success 1.
       * On error, -1 is returned, and errno is set appropriately.
*/
int _putchar(char c)
{
	return (write(1, &c, 1));
}
